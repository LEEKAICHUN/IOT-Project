#include <Adafruit_Fingerprint.h>
#include <Keypad.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <Servo.h>

Servo sl;

#if (defined(__AVR__) || defined(ESP8266)) && !defined(__AVR_ATmega2560__)
SoftwareSerial mySerial(2, 3);
#else
#define mySerial Serial1
#endif

Adafruit_Fingerprint finger = Adafruit_Fingerprint(&mySerial);

const byte ROWS = 4;
const byte COLS = 3;
char hexaKeys[ROWS][COLS] = {
  {'1', '2', '3'},
  {'4', '5', '6'},
  {'7', '8', '9'},
  {'*', '0', '#'}
};
byte rowPins[ROWS] = {10, 9, 8, 7};
byte colPins[COLS] = {6, 5, 4};
Keypad customKeypad = Keypad(makeKeymap(hexaKeys), rowPins, colPins, ROWS, COLS);

#define red 13
#define yellow 12
#define buttonPin 11
#define buzzer A2
int buttonState = 0;

char userPassword[] = "123456"; // Default user password
char adminPassword[] = "000000"; // Default admin password
char input_password[7]; // Maximum password length, including null terminator
bool passwordEntered = false;

LiquidCrystal_I2C lcd(0x27, 16, 2); // I2C address 0x27, 16 columns and 2 rows

void setup() {
  Serial.begin(9600);
  lcd.init();
lcd.backlight();
  sl.attach(A1);
  sl.write(90);
  pinMode(red, OUTPUT);
  pinMode(yellow, OUTPUT);
  pinMode(buttonPin, INPUT);
  pinMode(buzzer, OUTPUT);
  digitalWrite(yellow, LOW);
  digitalWrite(red, LOW);

  while (!Serial);
  delay(100);

  finger.begin(57600);
  finger.getParameters();
  finger.getTemplateCount();

  if (finger.templateCount == 0) {
    Serial.println("Sensor doesn't contain any fingerprint data. Please run the 'enroll' example.");
  } else {
    Serial.print("Sensor contains ");
    Serial.print(finger.templateCount);
    Serial.println(" templates");
  }

  Serial.println(F("\nWelcome to use our Smart Door Lock"));
}

void loop() {
  char key = customKeypad.getKey();
  buttonState = digitalRead(buttonPin);

  int fingerprintID = getFingerprintID();

  if (fingerprintID != -1) {
    Serial.print("Access granted for ID #");
    Serial.println(fingerprintID);
    // Additional actions for fingerprint match
  }

  if (key) {
    Serial.print(key);
    processKeypadInput(key);
  }

  if (buttonState == HIGH) {
    handleButtonPress();
 } else {
    handleButtonRelease();
  }
}

void processKeypadInput(char key) {
  if (!passwordEntered) {
    if (key == '*') {
      Serial.println("\nEnter Password");
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("Enter Password");
      lcd.setCursor(0, 1);
      clearPasswordBuffer();
    } else if (key == '#') {
      authenticatePassword();
      clearPasswordBuffer();
    } else {
      appendToPasswordBuffer(key);
      lcd.print('*');
    }

    // Automatically process when a 6-digit password is entered
    if (strlen(input_password) == 6) {
      authenticatePassword();
      clearPasswordBuffer();
    }
  } else {
    if (key == '*') {
      passwordEntered = false;
      Serial.println("Enter Password");
      lcd.clear();
      lcd.print("Enter Password");
      lcd.setCursor(0, 1);
    }
  }
}

void authenticatePassword() {
  bool passwordCorrect = false;

  if (strcmp(input_password, userPassword) == 0) {
    unlockDoor();
    passwordEntered = true;
    passwordCorrect = true;
  } else if (strcmp(input_password, adminPassword) == 0) {
    adminMenu();
       int choice = readChoice();

    switch (choice) {
      case 1:
        passwordMenu("user", userPassword);
        break;
      case 2:
        passwordMenu("admin", adminPassword);
        break;
      default:
        invalidChoiceMessage();
    }

    passwordEntered = true;
    passwordCorrect = true;
  }

  if (!passwordCorrect) {
    accessDeniedMessage();
  }
}

void clearPasswordBuffer() {
  memset(input_password, 0, sizeof(input_password));
}

void appendToPasswordBuffer(char key) {
  if (strlen(input_password) < sizeof(input_password) - 1) {
    strncat(input_password, &key, 1);
  }
}

void handleButtonPress() {
  digitalWrite(red, LOW);
  digitalWrite(yellow, HIGH);
  sl.write(0);
  delay(3000);
  sl.write(90);
}

void handleButtonRelease() {
  digitalWrite(yellow, LOW);
  digitalWrite(red, LOW);
  sl.write(90);
}

void unlockDoor() {
  Serial.println("\nACCESS GRANTED!");
Serial.println("Door unlocking....");
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("ACCESS GRANTED!");
  lcd.setCursor(0, 1);
  lcd.print("Door unlocking....");
  digitalWrite(yellow, HIGH);
  sl.write(0);
  delay(3000);
  Serial.println("Door locked");
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Door locked");
  sl.write(90);
  digitalWrite(yellow, LOW);
  delay(1000);
  lcd.clear();
}

void accessDeniedMessage() {
  Serial.println("\nACCESS DENIED! Try Again !");
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("ACCESS DENIED!");
  lcd.setCursor(0, 1);
  lcd.print("Try Again !");
  errorMessage();
}

void adminMenu() {
  Serial.println("\nAdmin Main Menu\n1.Change User Password\n2.Change Admin Password");
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("1.Change User PW");
  lcd.setCursor(0, 1);
  lcd.print("2.Change AdminPW");
  delay(3000);
}

void passwordMenu(const char* userType, char* password) {
  Serial.println("\nPassword Menu\nEnter current ");
  Serial.print(userType);
  Serial.println(" password to verify:");
  lcd.clear();
  lcd.print("Enter current ");
  lcd.setCursor(0, 1);
  lcd.print(userType);
lcd.print(" PW:");

  char currentPassword[7];
  readPassword(currentPassword);

  if (strcmp(currentPassword, password) == 0) {
    Serial.print("\nVerification successful. Enter new ");
    Serial.print(userType);
    Serial.println(" password:");
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Verified success.");
    delay(1000);
    lcd.clear();
    lcd.print("Enter new PW:");
    lcd.setCursor(0, 1);

    char newPassword[7];
    readPassword(newPassword);

    // Check if the new password is the same as the other type of password
    if ((strcmp(userType, "user") == 0 && strcmp(newPassword, adminPassword) == 0) ||
        (strcmp(userType, "admin") == 0 && strcmp(newPassword, userPassword) == 0)) {
      Serial.println("\nCannot same with other password");
      lcd.clear();
      lcd.print("Cannot same with");
      lcd.setCursor(0, 1);
      lcd.print("other PW");
      errorMessage();
      lcd.clear();
      return; // Exit the function without changing the password
    }

    Serial.println("\nConfirm new ");
    Serial.print(userType);
    Serial.println(" password:");
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Confirm new PW:");
    lcd.setCursor(0, 1);

    char confirmNewPassword[7];
    readPassword(confirmNewPassword);

    if (strcmp(newPassword, confirmNewPassword) == 0) {
      strcpy(password, newPassword); // Copy the new password
Serial.println("\nPassword changed successfully.");
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("Password changed");
      lcd.setCursor(0, 1);
      lcd.print("successfully.");
      delay(1000);
      lcd.clear();
    } else {
      Serial.println("\nPasswords do not match. Password change failed.");
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("New PW not match.");
      lcd.setCursor(0, 1);
      lcd.print("Change failed.");
      errorMessage();
      lcd.clear();
    }
  } else {
    Serial.println("\nVerification failed. Password change aborted.");
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Verified failed.");
    lcd.setCursor(0, 1);
    lcd.print("Change cancel.");
    errorMessage();
    lcd.clear();
  }
}

void errorMessage() {
  digitalWrite(red, HIGH);
  for (int i = 0; i < 3; i++) {
    tone(buzzer, 1000);
    delay(300);
    noTone(buzzer);
    delay(300);
  }
  delay(2000);
  digitalWrite(red, LOW);
  lcd.clear();
}

int readChoice() {
  Serial.print("\nEnter your choice:");
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Enter choice:");
 lcd.setCursor(0, 1);

  char key;
  char choiceStr[3] = "";

  do {
    key = customKeypad.getKey();
    if (key) {
      Serial.print(key);
      lcd.print(key);
      strncat(choiceStr, &key, 1);
    }
  } while (key != '#');

  int choice = atoi(choiceStr);
  lcd.clear();

  return choice;
}

void invalidChoiceMessage() {
  Serial.println("Invalid choice. Please try again.");
  lcd.clear();
  lcd.print("Invalid choice.");
  errorMessage();
}

int getFingerprintID() {
  uint8_t p;

  // Capture fingerprint image
  p = finger.getImage();
  if (p != FINGERPRINT_OK) {
    //Serial.println("Error capturing fingerprint image");
    return -1;
  }

  // Convert image to template
  p = finger.image2Tz();
  if (p != FINGERPRINT_OK) {
    Serial.println("Error converting image to template");
    return -1;
  }

  // Search for fingerprint in database
  p = finger.fingerSearch();
  if (p == FINGERPRINT_OK) {
    Serial.println("Fingerprint matched!");
  unlockDoor();
    return finger.fingerID;
  } else if (p == FINGERPRINT_NOTFOUND) {
    Serial.println("Fingerprint not found");
    accessDeniedMessage();
    delay(2000);
    return -1;
  } else {
    Serial.println("Unknown error");
    return -1;
  }
}

void readPassword(char* password) {
  char key;
  int index = 0;

  do {
    key = customKeypad.getKey();
    if (key != NO_KEY && key != '#') {
      Serial.print(key);
      lcd.print("*");
      password[index++] = key;
    }
  } while (key != '#');

  lcd.clear();
  lcd.setCursor(0, 1);
  password[index] = '\0';  // Null-terminate the password
}
